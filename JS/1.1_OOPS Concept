The Following are the 4 pillars of any object oriented programing language

1.)inheritance:- OOPs language supports inheritance.As JS is also a OOPs language it also support inheritance.
		 In inheritance a class inherits from another class.
		 In JS we dont have the concept of inheritance, so inheritance in JS is prototype-based.
		 This means to implement inheritance in JS, an object inherits from another object.

	Example:-
		<head>
		<body>
		<script type="text/javascript">
	
			var Employee = function (name){
				this.name = name;
			}
			Employee.prototype.getName = function(){
				return this.name
			}
		
			var EmployeeDetails = function(salary){
				this.salary = salary;
			}

			var emp = new Employee("Indra")
			EmployeeDetails.prototype = emp;
			var pe = new EmployeeDetails("1,20,000")
			document.write("Employee object" + emp.getName() + "<br/>")				// op:- indra
			document.write("EmployeeDetails object" + pe.getName() + "<br/>")			// op:- indra
			document.write("EmployeeDetails object" + pe.salary)					// op:- 1,20,0000
		</script>
		</body>
		</head>

	
	***hasOWnProperty:- Returns true if the property belongs to his object, else false.

		Example:-
			document.write(pe.hasOwnProperty("salary") + "<br/>")			// true
			document.write(pe.hasOwnProperty("name") + "<br/>")			// false
	
2.)Encapsulation
3.)Abstraction:-
	Abstract classes are incomplete so trying to create an instance of it will raise error
	Abstract classes have methods which have no body.
	
Note:- below point to understand prototype please refer to file named "28_prototype"

Overriding:-

	Example1:-
		<head>
		<script type="text/javascript" src="TeamA.js"></script>
		</head>
		<body>
			<script type="text/javascript">
			function getEmployeeDetails(){
				Employee.prototype.getName = function(){
					return this.name.toUpperCase();
				}
			}

			function Employee(name){
				this.name = name;
			}

			//Advantage of using prototype property to add function is that it enables us to override an existing function,
			//if required.

			Employee.prototype.getName = function(){
				return this.name;
			}

			getEmployeeDetails();				// overriding 
			var e1 = new Employee("Indra");
			var e2 = new Employee("Bittu");
			document.write(e1.getName() + "<br/>");
			document.write(e2.getName() + "<br/>");
			</script>
		</body>


	Example2:-
		<body>
		<script type="text/javascript">
			var alert = function(msg){
				document.write(msg)
			}
			alert("Hello")
			window.alert(" JavaScript")
		</script>
		</body>
