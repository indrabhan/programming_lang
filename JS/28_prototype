Using the prototype object to add functions : The following are the advantages of using the prototype object to add functions.
1. No matter how many objects you create, functions are loaded only once into memory
2. Allows you to override functions if required.


Example 1:-

function Employee(name) 
{
    this.name = name;

    this.getName = function () 
    {
        return this.name;
    }
}

var e1 = new Employee("Mark");
var e2 = new Employee("Sara");

document.write("e1.name = " + e1.getName() + "<br/>");
document.write("e2.name = " + e2.getName() + "<br/>");

Output : 
e1.name = Mark
e2.name = Sara

Note:- this referes to the current instance of constructor Employee function


Example 2:- 

function Employee(name)
{
    this.name = name;
}

Employee.getName = function ()
{
    return this.name;
}

var e1 = new Employee("Mark");
var e2 = new Employee("Sara");

document.write("e1.name = " + e1.getName() + "<br/>");		// It static function and they are called with static function name.
document.write("e2.name = " + e2.getName() + "<br/>");


Note:- In the following example getName() function is added to the Employee object using the name of the constructor function. This would result in undefined error.
Static methods are called with functionName.methodName 



Example 3:- prototype example

function Employee(name)
{
    this.name = name;
}

Employee.prototype.getName = function ()
{
    return this.name;
}

var e1 = new Employee("Mark");
var e2 = new Employee("Sara");

document.write("e1.name = " + e1.getName() + "<br/>");
document.write("e2.name = " + e2.getName() + "<br/>");

Output :
e1.name = Mark
e2.name = Sara
