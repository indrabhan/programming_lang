In object oriented programming,class have properties.

if you use public fields you cannot have control on that fields, so have an controlled on public fields we use properties.

1.)Read/Write properties.
2.)Read only properties.
3.)Write only properties.

For read we have get{} property.
For write we have set{} property.


Encapsulation:- restricting the access to the objects components.


Why do we need properties when we have public fields?
	Encpasulation is the pillar of object oriented programming.
	Properties provide encapsulation.If you used public fields
	you can not control on what is assigned and return from that
	public fields.

In the below example we have an Employee object with age as a public field.
There is nothing stopping us from setting the age field value to 1000;
Using properties you can control what values can be assigned.
You can also use properties to create just read-only or write only.


Example1:-
	<head>
	<body>
	<script type="text/javascript">
		function Employee(age){
			this.age = age;
		}
		var emp = new Employee(29)
		alert(emp.age)
		emp.age = 1000;		// here 1000 value is begin passes to age, but age can not be 1000,
					// so have a restrict we use proerty.
		alert(emp.age)
	</script>
	</body>
	</head>


Object has defineProperty() function
	1st parameter :- object on which we want to define property.
	2nd parameter :- name of attribute on which we want to define property.
	3rd parameter :- {get} function or {set} function property.


Example2:-
		<head>
		<body>
		<script type="text/javascript">
		function Employee(name, age){
			var _n = name;
			var _a = age;

		Object.defineProperty(this, "age", {
			get: function() {
				return _a;
			},
			set: function(value){		// set func take value parameter and it gets value from which we assign emp.age = 1000, 							   so value=1000;
				if(value < 1 || value > 150){
					alert("Invalid age")
				}
				else{
					_a = value
				}
			}
		})
		Object.defineProperty(this, "name", {
			get:function(){
				return _n
			}
		})
	}
	
	var emp = new Employee("Indra", 29)
	emp.age = 200;
	emp.name = "Bittu"
	alert("name:- " + emp.name)
	alert("age:- " + emp.age)
		
	</script>
	</body>
	</head>

