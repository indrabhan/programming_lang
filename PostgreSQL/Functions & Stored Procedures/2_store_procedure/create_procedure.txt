Stored procedure:
	A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again. So if you have an SQL 		query that you write over and over again, save it as a stored procedure, and then just call it to execute it.

	Until PostgreSQL version 11, both stored procedures and user-defined functions were created with the CREATE FUNCTION statement. 	However, beginning with PostgreSQL version 11, procedures can be created using the CREATE PROCEDURE statement.

Introduction to PostgreSQL CREATE PROCEDURE statement:
	So far, you have learned how to define user-defined functions using the create function statement.

	A drawback of user-defined functions is that they cannot execute transactions. In other words, inside a user-defined function, you 		cannot start a transaction, and commit or rollback it.

	In procedure we can make use of DML(insert/update/delete).

	*********PostgreSQL 11 introduced stored procedures that support transactions.************

	To define a new stored procedure, you use the create procedure statement.

	The following illustrates the basic syntax of the create procedure statement:

		create [or replace] procedure procedure_name(parameter_list)
		language plpgsql
		as $$
		declare
		-- variable declaration
		begin
		-- stored procedure body
		end; $$

	Parameters in stored procedures can have the in and inout modes. They cannot have the out mode.
	
	A stored procedure does not return a value. You cannot use the return statement with a value inside a store procedure like this:

		return expression;

	However, you can use the return statement without the expression to stop the stored procedure immediately:

		return;

	If you want to return a value from a stored procedure, you can use parameters with the inout mode.


Example:-
	We will use the following accounts table for the demonstration:
	
	drop table if exists accounts;

	create table accounts (
	    id int generated by default as identity,
	    name varchar(100) not null,
	    balance dec(15,2) not null,
	    primary key(id)
	);

	insert into accounts(name,balance)
	values('Bob',10000);

	insert into accounts(name,balance)
	values('Alice',10000);


Now create the store procedure that will tarnsfer money from 1 account to another.

	create or replace procedure transfer(
	   sender int,
	   receiver int, 
	   amount dec
	)
	language plpgsql    
	as $$
	begin
	    -- subtracting the amount from the sender's account 
		    update accounts 
		    set balance = balance - amount 
		    where id = sender;

	    -- adding the amount to the receiver's account
		    update accounts 
		    set balance = balance + amount 
		    where id = receiver;

	    commit;		// ********* please take a look
	end;$$



Calling a stored procedure
To call a stored procedure, you use the CALL statement as follows:

	call stored_procedure_name(argument_list);
	
	call transfer(1,2,1000);		// 1 and 2 are the ids of sender and receiver and 1000 is the amount.

	Now see the change in accounts table

