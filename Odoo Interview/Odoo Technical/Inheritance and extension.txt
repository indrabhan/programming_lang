1.)inherit:- 
	add fields to a model,
	override the definition of fields on a model,
	add constraints to a model,
	add methods to a model,
	override existing methods on a model.

	1.)_name and _inherit have same model name.

		- stored in same table.
		- new class compatible with existing views.
		- Example:-
			_name='obj1' and inherit='obj1'

		
	2.)_name and _inherit have different model.
		
		- Store in different table.		
		- Used to copy feature.
		- New class ignore with existing views.

		When using the _inherit and _name attributes together, Odoo creates a new model using the existing one (provided via _inherit) 			as a base. The new model gets all the fields, methods and meta-information (defaults & al) from its base.		
		
		class Inheritance1(models.Model):
		    _name = 'inheritance.1'
		    _inherit = 'inheritance.0'
		    _description = 'Inheritance One'



2.)inherits:- This is used if you want to sink another model in your current model without affecting the views. 
		So the database tables contain fields in your model and also a field representing the inherited object.	
	
		Example:- product.product inherits product.template or res.users inherits res.partner.

			class ProductTemplate(models.Model): 
			    _name = "product.template" 
			 
			class ProductProduct(models.Model): 
			    _name = "product.product"
			    _inherits = {'product.template': 'product_tmpl_id'} 

			product_tmpl_id =  fields.Many2one('product.template', 'Product Template', required=True, ondelete="cascade")

			
		- The Product model can use the fields from the Product template but the fields in the product template are only 					stored in the product template table.
		- Multiple inheritance is possible.
		- Stored in different tables.
		- New class ignore with existing views
		
						
		Example2:-
			class Screen(models.Model):
			    _name = 'delegation.screen'
			    _description = 'Screen'

			    size = fields.Float(string='Screen Size in inches')

			class Keyboard(models.Model):
			    _name = 'delegation.keyboard'
			    _description = 'Keyboard'

			    layout = fields.Char(string='Layout')

			class Laptop(models.Model):
			    _name = 'delegation.laptop'
			    _description = 'Laptop'

			    _inherits = {
				'delegation.screen': 'screen_id',		//multiple inheritance.
				'delegation.keyboard': 'keyboard_id',
			    }
			
			    name = fields.Char(string='Name')
			    maker = fields.Char(string='Maker')

			    # a Laptop has a screen
			    screen_id = fields.Many2one('delegation.screen', required=True, ondelete="cascade")

			    # a Laptop has a keyboard
			    keyboard_id = fields.Many2one('delegation.keyboard', required=True, ondelete="cascade")


			    record = env['delegation.laptop'].create({
				    'screen_id': env['delegation.screen'].create({'size': 13.0}).id,
				    'keyboard_id': env['delegation.keyboard'].create({'layout': 'QWERTY'}).id,
				})

			    print (record.size)
			    print (record.layout)

			    will result in: 13.0 and QWERTY

			    And it’s possible to write directly on the delegated field:

        		    record.write({'size': 14.0})

		
	Note:-
		when using delegation inheritance, methods are not inherited, only fields.

	Warnning:-
		_inherits is more or less implemented, avoid it if you can;
		chained _inherits is essentially not implemented, we cannot guarantee anything on the final behavior.



3.)Fields Incremental Definition:-

	A field is defined as class attribute on a model class. If the model is extended, one can also extend the field definition by 		redefining a field with the same name and same type on the subclass. In that case, the attributes of the field are taken from the 		parent class and overridden by the ones given in subclasses.

	For instance, the second class below only adds a tooltip on the field state:

	class First(models.Model):
	    _name = 'foo'
	    state = fields.Selection([...], required=True)

	class Second(models.Model):
	    _inherit = 'foo'
	    state = fields.Selection(help="Blah Blah Blah")


4.)Error management:-
	
	The Odoo Exceptions module defines a few core exception types.

	1.)odoo.exceptions.UserError:-
		Generic error managed by the client.

		Typically when the user tries to do something that has no sense given the current state of a record.

	2.)odoo.exceptions.ValidationError
		Violation of python constraints.

		Example
			When you try to create a new user with a login which already exist in the db.

	3.)odoo.exceptions.MissingError:
		Missing record(s).
	
		Example
			When you try to write on a deleted record.

	4.)odoo.exceptions.RedirectWarning:
		Warning with a possibility to redirect the user instead of simply displaying the warning message.

		Parameters	
			action_id (int) – id of the action where to perform the redirection
			button_text (str) – text to put on the button that will trigger the redirection
