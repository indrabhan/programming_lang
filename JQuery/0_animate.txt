animate

	syntax:- $(selector).animate({params},speed,callback);
				
			The required params parameter defines the CSS properties to be animated.
			The ooptional are speed and callback

		Ex1:-The following example demonstrates a simple use of the animate() method; it moves a <div> element to the right, until it 				has reached a left property of 250px:

			$("button").click(function(){
			  $("div").animate({left: '250px'});
			});

			Note:- By default, all HTML elements have a static position, and cannot be moved.
				To manipulate the position, remember to first set the CSS position property of the element to relative, fixed, 					or absolute!



		Ex2:-Manipulate Multiple Properties.

			$("button").click(function(){
				  $("div").animate({
					    left: '250px',
					    opacity: '0.5',
					    height: '150px',
					    width: '150px',
					    paddingRight: '10px'
					  });
			}); 

			Note:- Is it possible to manipulate ALL CSS properties with the animate() method?

				Yes, almost! However, there is one important thing to remember: all property names must be camel-cased when 					used with the animate() method: You will need to write paddingLeft instead of padding-left, marginRight 				instead of margin-right, and so on.

				Also, color animation is not included in the core jQuery library.
				If you want to animate color, you need to download the Color Animations plugin from jQuery.com.


		Ex3:-Using Relative Values

			It is also possible to define relative values (the value is then relative to the element's current value). This is 				done by putting += or -= in front of the value:

			$("button").click(function(){
				  $("div").animate({
					    left: '250px',
					    height: '+=150px',
					    width: '+=150px'
					  });
				}); 


		Ex4:-Using Pre-defined Values

			You can even specify a property's animation value as "show", "hide", or "toggle":

			$("button").click(function(){
			  $("div").animate({
				    height: 'toggle'		// take a look at this line.
				  });
			}); 


		Ex5:-Uses Queue Functionality

			By default, jQuery comes with queue functionality for animations.

			This means that if you write multiple animate() calls after each other, jQuery creates an "internal" queue with these 				method calls. Then it runs the animate calls ONE by ONE.

			$("button").click(function(){
			  var div = $("div");
			  div.animate({height: '300px', opacity: '0.4'}, "slow");
			  div.animate({width: '300px', opacity: '0.8'}, "slow");
			  div.animate({height: '100px', opacity: '0.4'}, "slow");
			  div.animate({width: '100px', opacity: '0.8'}, "slow");
			});
