The Following are the 4 pillars of any object oriented programing language

1.)inheritance:- OOPs language supports inheritance.As JS is also a OOPs language it also support inheritance.
		 In inheritance a class inherits from another class.
		 In JS we dont have the concept of inheritance, so inheritance in JS is prototype-based.
		 This means to implement inheritance in JS, an object inherits from another object.

	Example:-
		<head>
		<body>
		<script type="text/javascript">
	
			var Employee = function (name){
				this.name = name;
			}
			Employee.prototype.getName = function(){
				return this.name
			}
		
			var EmployeeDetails = function(salary){
				this.salary = salary;
			}

			var emp = new Employee("Indra")
			EmployeeDetails.prototype = emp;
			var pe = new EmployeeDetails("1,20,000")
			document.write("Employee object" + emp.getName() + "<br/>")				// op:- indra
			document.write("EmployeeDetails object" + pe.getName() + "<br/>")			// op:- indra
			document.write("EmployeeDetails object" + pe.salary)					// op:- 1,20,0000
		</script>
		</body>
		</head>

	
	***hasOWnProperty:- Returns true if the property belongs to his object, else false.

		Example:-
			document.write(pe.hasOwnProperty("salary") + "<br/>")			// true
			document.write(pe.hasOwnProperty("name") + "<br/>")			// false
	
2.)Encapsulation
3.)Abstraction:-
	Abstract classes are incomplete so trying to create an instance of it will raise error
	Abstract classes have methods which have no body.
	
4.)Polymorphism

In JavaScript we dont not have classes.Instead we use functions.
so their are two ways in which we can create Objects.

1.)Constructor function:- Object define using the constructor lets you to have multiple instance of that object.
			  This means change made to one instance, will not affect other instance.
			  In short I can say its like a non-static variables.
	Example:-
		<body>
		<script type="text/javascript">
			function Employee(firstName, lastName){
				this.fname = firstName;
				this.lname = lastName;
				this.getFullName = function (){
					return this.fname + " " + this.lname
				}
			}

			// Here we created an Object "emp" of function Employee
			var emp = new Employee("Indra", "Bhamare")

			document.write(emp.fname + "<br/>")
			document.write(emp.lname + "<br/>")
			document.write(emp.getFullName() + "<br/>")
		</script>
		</body>


	Example2:-
		<body>
		<script type="text/javascript">
			var emp = function (){
				this.fname = "Indrabhan";
			}
			var employee = new emp()

			var newEmployee = new emp();

			document.write("Before Change" + "<br/>")
			document.write("employee firstName: " + employee.fname + "<br/>");			// op:- Indrabhan
			document.write("newEmp firstName: " + newEmployee.fname + "<br/>");			// op:- Indrabhan

			document.write("<br/><br/>")

			newEmployee.fname = "Bittu"
			document.write("After Change" + "<br/>")
			document.write("employee firstName: " + employee.fname + "<br/>");			// op:- Indrabhan
			document.write("newEmp firstName: " + newEmployee.fname + "<br/>");			// op:- Bittu
		</script>
		</body>

2.)Literal notation:- Objects created using literal are singletons.This means when a change is made to the object, 
		      it affects that object accross the entire script.
		      In short I can say its like a static variables.
	Example:-
		<body>
		<script type="text/javascript">
			// Here "emp" is treated as Object
			var emp = {
				fname: "Indrabhan",
				lname: "Bhamare",
				getFullName: function(){
					return emp.fname + " " + emp.lname
				}
			}
			document.write(emp.fname + "<br/>")
			document.write(emp.lname + "<br/>")
			document.write(emp.getFullName() + "<br/>")
		</script>
		</body>


	Example2:-
		<body>
		<script type="text/javascript">
			var emp = {
				fname: "Indrabhan"
			}
			var newEmp = emp;
			document.write("Before Change" + "<br/>")
			document.write("emp fname: " + emp.fname + "<br/>")				// op:- Indrabhan
			document.write("newEmp fname: " + newEmp.fname + "<br/>")			// op:- Indrabhan

			document.write("<br/><br/>")

			newEmp.fname = "Bittu"

			document.write("After Change" + "<br/>")
			document.write("emp fname: " + emp.fname + "<br/>")				// op:- Bittu
			document.write("newEmp fname: " + newEmp.fname + "<br/>")			// op:- Bittu

		</script>
		</body>


**When to use over the other:-
	If you need multiple instance of the object use constructor function
	whereas if you need just one instance of the object then use literal notation.



Overriding:-

	Example1:-
		<head>
		<script type="text/javascript" src="TeamA.js"></script>
		</head>
		<body>
			<script type="text/javascript">
			function getEmployeeDetails(){
				Employee.prototype.getName = function(){
					return this.name.toUpperCase();
				}
			}

			function Employee(name){
				this.name = name;
			}

			//Advantage of using prototype property to add function is that it enables us to override an existing function,
			//if required.

			Employee.prototype.getName = function(){
				return this.name;
			}

			getEmployeeDetails();				// overriding 
			var e1 = new Employee("Indra");
			var e2 = new Employee("Bittu");
			document.write(e1.getName() + "<br/>");
			document.write(e2.getName() + "<br/>");
			</script>
		</body>


	Example2:-
		<body>
		<script type="text/javascript">
			var alert = function(msg){
				document.write(msg)
			}
			alert("Hello")
			window.alert(" JavaScript")
		</script>
		</body>
