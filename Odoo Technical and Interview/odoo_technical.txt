Shopify:-
	1.)To connect with shopify you nedd API_key(user name in Magento) and API_password (user password in magento).
	2.)From shopify App menu you can create the Credentials.For the credentials you created you need to give access like Read and 			Read&Write.
	3.)Make use of requests lib to connect using get method.
		For magento 1st you need to generate access token using user name and user password.
		then pass the access token to any api like customer api, product api.

		For shopify no need to get access token, within the API you can pass the api_key and api_pass.
	
	4.)requests.get(url):-
		get method is use to get the data.

	5.requests.post(url, data={pass the data in dictionary format}):
		post method is use to pass the data.
		In shopify we need to pass some product data from odoo, so in product form we kept button "Export product" and on that button 			we have call the post method along with data using the data parameter of post method.

	6.)resquest.put(url, data={pass the data in dictionary format}):
		put method is use to update the data.Need to pass required data given by api.
		suppose we want to update the product from odoo to shopify se we keep update product and make use of put method.

	7.)First create instance menu and record where you will store shopify url, shopify api_key and shopify api_pass.
	8.)get the stores and then work for other api's.
			


1.)Odoo Architecture

	MVC(module,viwe controller)
	module:-db(postgres)
	view:-request from browser
	controller:-takes request from browser send it to postgres db and fetch data
			its an orm framework which is api



2.)Models:- Odoo has 3 types of models.
	1.)Model: These types of model have permanent database persistence: database tables are created for them and their records are stored 				until explicitly deleted.

		class MinimalModel(models.Model):
    			_name = 'test.model'		: Table of this name will be created in postgres.
	
			
	2.)Transient: Transient models are based on the models.TransientModel class and are used for wizard-style user interaction.
			Their data is still stored in the database, but it is expected to be temporary.
			A vacuum job periodically clears old data from these tables.

	3.)AbstractModel: They don't have a database representation. no actual tables are created for them.
			  We can think of them as templates with ready-to-use features.
			  For Qweb Report we make use of them.
			  They are expected to be used as mixin classes 
			  The mail.thread is an abstract model.




