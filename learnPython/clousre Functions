Example1:-
	def print_msg(msg):
	# This is the outer enclosing function

	    def printer():
		# This is the nested/inner function
		print(msg)

	    printer()

	# We execute the function
	# Output: Hello
	print_msg("Hello")

We can see that the nested function printer() was able to access the non-local variable msg of the enclosing function.


Example2:-
	def print_msg(msg):
	# This is the outer enclosing function

	    def printer():
		# This is the nested function
		print(msg)

	    return printer  # this got changed

	# Now let's try calling this function.
	# Output: Hello
	another = print_msg("Hello")
	another()

The print_msg() function was called with the string "Hello" and the returned function was bound to the name another. On calling another(), the message was still remembered although we had already finished executing the print_msg() function.

This technique by which some data ("Hello") gets attached to the code is called closure in Python.

This value in the enclosing scope is remembered even when the variable goes out of scope or the function itself is removed from the current namespace.

>>> del print_msg
>>> another()
Hello
>>> print_msg("Hello")
Traceback (most recent call last):
...
NameError: name 'print_msg' is not defined
