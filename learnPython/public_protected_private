Python - public, private and protected Access Modifiers

Classical object-oriented languages, such as C++ and Java, control the access to class resources by public, private and protected keywords. Private members of a class are denied access from the environment outside the class. They can be handled only from within the class.

Public members (generally methods declared in a class) are accessible from outside the class. The object of the same class is required to invoke a public method. This arrangement of private instance variables and public methods ensures the principle of data encapsulation.

Protected members of a class are accessible from within the class and are also available to its sub-classes. No other environment is permitted access to it. This enables specific resources of the parent class to be inherited by the child class.

Python doesn't have any mechanism that effectively restricts access to any instance variable or method. Python prescribes a convention of prefixing the name of the variable/method with single or double underscore to emulate the behaviour of protected and private access specifiers.

All members in a Python class are public by default. Any member can be accessed from outside the class environment



1.) Public Attributes:-
	class employee:
	    def __init__(self, name, sal):
		self.name=name
		self.salary=sal
	
	>>> e1=Employee("Kiran",10000)
	>>> e1.salary
	10000
	>>> e1.salary=20000
	>>> e1.salary
	20000 


2.)Protected Attributes:-Python's convention to make an instance variable protected is to add a prefix _ (single underscore) to it.
	class employee:
	    def __init__(self, name, sal):
		self._name=name  # protected attribute 
		self._salary=sal # protected attribute

	In fact, this doesn't prevent instance variables from accessing or modifying the instance. You can still perform the following 		operations:

	>>> e1=employee("Swati", 10000)
	>>> e1._salary
	10000
	>>> e1._salary=20000
	>>> e1._salary
	20000


3.)Private Attributes:-A double underscore __ prefixed to a variable makes it private. It gives a strong suggestion not to touch it from 				outside the class. Any attempt to do so will result in an AttributeError:

	class employee:
	    def __init__(self, name, sal):
		self.__name=name  # private attribute 
		self.__salary=sal # private attribute

	>>> e1=employee("Bill",10000)
	>>> e1.__salary
	AttributeError: 'employee' object has no attribute '__salary'


	Python performs name mangling of private variables. Every member with double underscore will be changed to _object._class__variable. 		If so required, it can still be accessed from outside the class, but the practice should be refrained/stop.

	>>> e1=Employee("Bill",10000)
	>>> e1._Employee__salary
	10000
	>>> e1._Employee__salary=20000
	>>> e1._Employee__salary
	20000  












*********************   Private   *********************

Filename:- a.py

	x = 10
	_y = 5				# by using _ we make it private.

	def hello():
		print ("hello")
	def _bye():			# by using _ we make it private.
		print ("Bye")


Filename:- b.py

	from a import *  # * means we import all (var, def, class)

	print (x)	# o/p  10
	print (_y)	# o/p  Error, _y is define as a private varaible and we have also not import it personally by it name
	def _bye()	# o/p  Error, _bye() is define a private and we have also not import it personally by it name


Filename:- c.py

	from a import _x, _bye

	print (x)	# o/p  10
	print (_y)	# o/p  5     _y variable begin private but we have also import it personally by its name.
	def _bye()	# o/p  "Bye" _bye() begin private but we have also import it personally by its name.



*********************** underscore **********************

_ takes the last executed value.
we use _ when we do not want to make use of that variable.

Eg:- 1+5+6     # o/p 12		# _  o/p 12

Eg:- x,_ = (1,2)   # o/p x = 1,  _ = 2


*********************  Double UnderScore  *****************

We use __ in the scenario of inheterance.
suppose we have a method name same in child class as well as in parent class, 
so there is confusion on calling that method,so we use __ because calling style of __ method is bit little diff.
we call it like "objectRef._ClassName.MethodName"

class A
	def _single_method():
		pass

	def __double_method():
		print ("A")

a = A()				# make an object of class A.
a._single_method()		# we call the  method.
a._A__double_method 		# we call it objectRef._ClassName.MethodName		# o/p is A


Class B(A)
	def __double_method():
		print ("B")

b = B()
b._A__double_method()		# o/p is A
b._B__double_method()		# o/p is B
