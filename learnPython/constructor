*Constructor:- A constructor is a special type of method (function) which is used to initialize the instance members of the class.

		Constructors can be of two types.

			1.)Parameterized Constructor
			2.)Non-parameterized Constructor

		In python, the method __init__ simulates the constructor of the class.
		This method is called when the class is instantiated.(when class object is created.)

	Example:-
		class Employee:  
		    def __init__(self,name,id):  	# constructor, it will be called automactically when the class object is created.
			self.id = id;  
			self.name = name;  
		    def display (self):  
			print("ID: %d \n Name: %s" % (self.id,self.name))  	# %d is used for integer value
										# %s is used for string value.
		emp = Employee("John",101)  
		emp.display()



*Python In-built class functions

The in-built functions defined in the class are described in the following table.

Function			Description

getattr(obj, name, default)	It is used to access the attribute of the object.
setattr(obj, name, value)	It is used to set a particular value to the specific attribute of an object.
delattr(obj, name)		It is used to delete a specific attribute.
hasattr(obj, name)		It returns true if the object contains some specific attribute.


Example:-
	class Student:
		def __init__(self, place, id):
			self.place = place
			self.id =id

		stud_obj = Student('Dhule', 23)
		a = getattr(stud_obj, 'place')		# o/p Dhule
		

		b = setattr(stud_obj, 'id', 28)		# It will set the attribute id=23 to id=28
		c = getattr(stud_obj, 'id')		# o/p 28
		



*Built-in class attributes:-

Attribute		Description

__dict__		It provides the dictionary containing the information about the class namespace.
__doc__			It contains a string which has the class documentation
__name__		It is used to access the class name.
__module__		It is used to access the module in which, this class is defined.
__bases__		It contains a tuple including all base classes.



Example:-
	class Student:
		"This is sample Student class"
		def __init__(self, place, id):
			self.place = place
			self.id =id

		stud_obj = Student('Dhule', 23)

		print "__doc__",stud_obj.__doc__		# o/p This is sample Student class
		print "__dict__",stud_obj.__dict__		# o/p {'place': 'Dhule', 'id': 23}
		print "__module__",stud_obj.__module__		# o/p __main__

		if __name == "__main__":
			print "This is main module"		# o/p This is main module.



*The issubclass(sub,sup) method

The issubclass(sub, sup) method is used to check the relationships between the specified classes. It returns true if the first class is the subclass of the second class, and false otherwise.

Example:-
	class Calculation1:  
    		def Summation(self,a,b):  
       		return a+b;  

	class Calculation2:  
	    def Multiplication(self,a,b):  
		return a*b;  

	class Derived(Calculation1,Calculation2):  
	    def Divide(self,a,b):  
		return a/b;  

	d = Derived()  
	print(issubclass(Derived,Calculation2))  	# o/p True
	print(issubclass(Calculation1,Calculation2))    # o/p False



*The isinstance (obj, class) method

The isinstance() method is used to check the relationship between the objects and classes. It returns true if the first parameter, i.e., obj is the instance of the second parameter, i.e., class.

Example:-
	class Student:
		"This is sample Student class"
		def __init__(self, place, id):
			self.place = place
			self.id = id
		stud_obj = Student('Dhule', 23)

		print (isinstance(stud_obj, Student))		# True



*Method Overriding:-(for overriding we must have inheritance.) (same method name in different class.)
		     When the parent class method is defined in the child class with some specific implementation, then the concept is called 			     method overriding.

	Example:-
		class Animal:  
		    def speak(self):  
			print("speaking")

		class Dog(Animal):  
		    def speak(self):  
			print("Barking")
 
		d = Dog()
		d.speak()	# o/p Barking  

*Method Overloading:-
			mulitiple method having same name but different arguments.
			python recoginized only the last method(same method name).

