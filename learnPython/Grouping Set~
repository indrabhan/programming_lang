********** Grouping Sets **********

1)Grouping Sets  – generate multiple grouping sets in reporting.
2)Cube – define multiple grouping sets that include all possible combinations of dimensions.
3)Rollup – generate reports that contain totals an subtotals.


*****1)Grouping Sets  – generate multiple grouping sets in reporting.

PostgreSQL provides the GROUPING SETS which is the subclause of the GROUP BY clause.
The GROUPING SETS allows you to define multiple grouping sets in the same query.


--QUERY_1			|--QUERY_2		        |--QUERY_3		        |--QUERY_4
	SELECT			|   SELECT			|     SELECT			|     SELECT	 
	    brand,		|	brand,			|	category,		|	SUM (sales) as sales
	    category,		|	SUM (sales) sales	|	SUM (sales) sales	|    
	    SUM (sales) sales	|   			    	|				|
	FROM			|    FROM			|     FROM			|     FROM
	    sales.sales_summary	|        sales.sales_summary	|	sales.sales_summary	|	sales.sales_summary
	GROUP BY		|    GROUP BY			|     GROUP BY			|   
	      brand,		|	  brand,		|	   category,		|	
	      category	    	|	                        |   				|   *Note:- empty grouping set(),It return
				|				|				|           sales amount for all brands and
													    categories
	
The four queries above return four result sets with four grouping sets:

QUERY_1:- (brand, category)
QUERY_2:- (brand)
QUERY_3:- (category)
QUERY_4:- ()

To get a unified result set with the aggregated data for all grouping sets, you can use the UNION ALL operator.
Because UNION ALL operator requires all result set to have the same number of columns, you need to add NULL to the select list to the queries as shown below:

--QUERY

SELECT brand, category, SUM (sales_amount) as sales FROM sales.sales_summary GROUP BY brand, category
UNION ALL
SELECT brand, NULL,     SUM (sales_amount) as sales FROM sales.sales_summary GROUP BY brand
UNION ALL
SELECT NULL, category,  SUM (sales_amount) as sales FROM sales.sales_summary GROUP BY category
UNION ALL
SELECT NULL, NULL,      SUM (sales_amount) as sales FROM sales.sales_summary GROUP BY category


The query generated a single result with the aggregates for all grouping sets as we expected.
However, it has two major problems:

a)The query is quite lengthy
b)The query is slow because Server needs to execute four queries and combine the result sets into a single one.

To fix these problems, SQL Server provides a subclause of the GROUP BY clause called GROUPING SETS.

The GROUPING SETS defines multiple grouping sets in the same query. The following shows the general syntax of the GROUPING SETS:
--syntax:-
	 SELECT column_1, column_2, aggregate_function(column_3)
	    FROM table_name
	    	GROUP BY 
	    	   GROUPING SETS(
			(column_1, column_2),
			(column_1),
			(column_2),
			()
			);
This query creates four grouping sets:

1)(column1,column2)
2)(column1)
3)(column2)
4)()

--QUERY:-
	SELECT brand, category, SUM (sales_amount) as sales
	    FROM table_name
	    	GROUP BY 
	    	   GROUPING SETS(
			(brand, category),
			(brand),
			(category),
			()
			);




*****2)Cube – define multiple grouping sets that include all possible combinations of dimensions.

**Cube create all multiple grouping sets.

The CUBE is a subclause of the GROUP BY clause that allows you to generate multiple grouping sets. 
The following illustrates the general syntax of the CUBE:
--syntax:- 
	SELECT d1, d2, d3, aggregate_function (c4)
	FROM
	    table_name
	GROUP BY
	    CUBE (d1, d2, d3);

In this syntax, the CUBE generates all possible grouping sets based on the
dimension columns d1, d2, and d3 that you specify in the CUBE clause.

The above query returns the same result set as the following query, which uses the  GROUPING SETS:

	SELECT d1, d2, d3, aggregate_function (c4)
	FROM
	    table_name
	GROUP BY
	    GROUPING SETS (
		(d1,d2,d3), 
		(d1,d2),
		(d1,d3),
		(d2,d3),
		(d1),
		(d2),
		(d3), 
		()
	     );


***PostgreSQL Server CUBE examples

The following statement uses the CUBE to generate four grouping sets:

(brand, category)
(brand)
(category)
()

--QUERY:-
	SELECT
	    brand,
	    category,
	    SUM (sales_amount) sales
	FROM
	    sales.sales_summary
	GROUP BY
	    CUBE(brand, category);





*****3)Rollup – generate reports that contain totals an subtotals.

** When generating the grouping sets, ROLLUP assumes a hierarchy among the dimension columns and,
   only generates grouping sets based on this hierarchy.

Let’s consider an example. The following CUBE (d1,d2,d3) defines eight possible grouping sets:
(d1, d2, d3)
(d1, d2)
(d2, d3)
(d1, d3)
(d1)
(d2)
(d3)
()


And the ROLLUP(d1,d2,d3) creates only four grouping sets, assuming the hierarchy d1 > d2 > d3, as follows:
(d1, d2, d3)
(d1, d2)
(d1)
()

The ROLLUP is commonly used to calculate the aggregates of hierarchical data such as sales by year > quarter > month.

** The following query uses the ROLLUP to calculate the sales amount by brand (subtotal) and both brand and category (total).

	SELECT
	    brand,
	    category,
	    SUM (sale_amount) sales
	FROM
	    sales.sales_summary
	GROUP BY
	    ROLLUP(brand, category);

output:- 
	name	   category	     sales
	Electra	   child bicycles    207606.00
	Electra    comfort bicycles  271542.00
	Electra	   crusies bicycles  694909.00
	
	Electa     NULL		     1174057

	Haro       child bicycles    29240.00
	Haro       mountain biycles  156145.00

	Haro       NULL		     185385.00

Note:- Here brand Electra with its category subtotal is given.
       brand Electra with all its category total is given (null category in output)


In this example, the query assumes that there is a hierarchy between brand and category, which is the brand > category.

**Note:- that if you change the order of brand and category, the result will be different	
