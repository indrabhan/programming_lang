Generators in Python

	Python generators are a simple way of creating iterators.

	Simply speaking, a generator is a function that returns an object (iterator) which we can iterate over (one value at a time).
	
	
Create Generators in Python
	1.)It is fairly simple to create a generator in Python. It is as easy as defining a normal function, but with a "yield" statement 		instead of a return statement.

	2.)If a function contains at least one yield statement (it may contain other yield or return statements), it becomes a generator 			function. Both yield and return will return some value from a function.

	3.)The difference is that while a return statement terminates a function entirely, yield statement pauses the function saving all its 			states and later continues from there on successive calls.


Example1:-
	# A simple generator function
	def my_gen():
	    n = 1
	    print('This is printed first')
	    # Generator function contains yield statements
	    yield n

	    n += 1
	    print('This is printed second')
	    yield n

	    n += 1
	    print('This is printed at last')
	    yield n

	
	O/p:
		
	>>> # It returns an object but does not start execution immediately.
	>>> a = my_gen()

	>>> # We can iterate through the items using next().
	>>> next(a)
	This is printed first
	1
	>>> # Once the function yields, the function is paused and the control is transferred to the caller.

	>>> # Local variables and theirs states are remembered between successive calls.
	>>> next(a)
	This is printed second
	2

	>>> next(a)
	This is printed at last
	3

	>>> # Finally, when the function terminates, StopIteration is raised automatically on further calls.
	>>> next(a)
	Traceback (most recent call last):
	...
	StopIteration
	>>> next(a)
	Traceback (most recent call last):


Example2:

	Unlike normal functions, the local variables are not destroyed when the function yields. Furthermore, the generator object can 		be iterated only once.

	************One final thing to note is that we can use generators with for loops directly.

	This is because a for loop takes an iterator and iterates over it using next() function. It automatically ends when StopIteration is 		raised. Check here to know how a for loop is actually implemented in Python.



		# Using for loop
		for item in my_gen():
		    print(item)


		O/P:-
			This is printed first
			1
			This is printed second
			2
			This is printed at last
			3



Python Generators with a Loop
	The above example is of less use and we studied it just to get an idea of what was happening in the background.

		def rev_str(my_str):
		    length = len(my_str)
		    for i in range(length - 1, -1, -1):
			yield my_str[i]


		# For loop to reverse the string
		for char in rev_str("hello"):
		    print(char)

	
		O/P:-
			o
			l
			l
			e
			h


		
Python Generator Expression
	1.)Simple generators can be easily created on the fly using generator expressions. It makes building generators easy.

	2.)Similar to the lambda functions which create anonymous functions, generator expressions create anonymous generator functions.

	3.)The syntax for generator expression is similar to that of a list comprehension in Python. But the square brackets are replaced with 			round parentheses.

	4.)The major difference between a list comprehension and a generator expression is that a list comprehension produces the entire list 			while the generator expression produces one item at a time.

	5.)They have lazy execution ( producing items only when asked for ). For this reason, a generator expression is much more memory 			efficient than an equivalent list comprehension.

	
	Example

		my_list = [1, 3, 6, 10]

		list_ = [x**2 for x in my_list]

		generator = (x**2 for x in my_list)

		print(list_)
		print(generator)

	O/p:
		[1, 9, 36, 100]
		<generator object <genexpr> at 0x7f5d4eb4bf50>

	
	We can see above that the generator expression did not produce the required result immediately. Instead, it returned a generator 		object, which produces items only on demand.

	Here is how we can start getting items from the generator:

		# Initialize the list
		my_list = [1, 3, 6, 10]

		a = (x**2 for x in my_list)
		print(next(a))

		print(next(a))

		print(next(a))

		print(next(a))

		next(a)

		
	O/P:
		1
		9
		36
		100
		Traceback (most recent call last):
		  File "<string>", line 15, in <module>
		StopIteration



Memory Efficient
	A normal function to return a sequence will create the entire sequence in memory before returning the result. This is an overkill, if 		the number of items in the sequence is very large.

	Generator implementation of such sequences is memory friendly and is preferred since it only produces one item at a time.


