Iterators in Python

	1.)In Short Explain
		Iterator in python is any python type that can be used with a ‘for in loop’. 
		Python lists, tuples, dicts and sets are all examples of inbuilt iterators.
		To stop the iteration StopIteration Exception is used.


		we can create our own iterator.
		1st create the iterable object with __iter__() method
		2nd call the __next__() method on iterable object. 


	2.)In Detail Explain
		Iterator in Python is simply an object that can be iterated upon. An object which will return data, one element at a time.

		Technically speaking, a Python iterator object must implement two special methods, __iter__() and __next__(), collectively 			called the iterator protocol.

		An object is called iterable if we can get an iterator from it. Most built-in containers in Python like: list, tuple, string 			etc. are iterables.

		The iter() function (which in turn calls the __iter__() method) returns an iterator from them.

	
		2.)Iterating Through an Iterator
			We use the next() function to manually iterate through all the items of an iterator. When we reach the end and there 				is no more data to be returned, it will raise the StopIteration Exception. Following is an example.

				1.)# define a list
					my_list = [4, 7, 0, 3]

				2.)# get an iterator using iter()
					my_iter = iter(my_list)

					print (type(my_iter))
							                                                                                                                
						Output: <class 'list_iterator'>


				3.)# iterate through it using next()

					# Output: 4
					print(next(my_iter))

					# Output: 7
					print(next(my_iter))

					# next(obj) is same as obj.__next__()

					# Output: 0
					print(my_iter.__next__())

					# Output: 3
					print(my_iter.__next__())

					# This will raise error, no items left
					next(my_iter)


					OUTPUT:-
						4
						7
						0
						3
						Traceback (most recent call last):
						  File "<string>", line 24, in <module>
						    next(my_iter)
						StopIteration



			A more elegant way of automatically iterating is by using the for loop. Using this, we can iterate over any object 				that can return an iterator, for example list, string, file etc.

				>>> for element in my_list:
				...     print(element)
				...     
				4
				7
				0
				3


	
	3.)Working of for loop for Iterators
		As we see in the above example, the for loop was able to iterate automatically through the list.

		In fact the for loop can iterate over any iterable. Let's take a closer look at how the for loop is actually implemented in 			Python.

		for element in iterable:
    			# do something with element

		Is actually implemented as.

			# create an iterator object from that iterable
			iter_obj = iter(iterable)

			# infinite loop
			while True:
			    try:
				# get the next item
				element = next(iter_obj)
				# do something with element
			    except StopIteration:
				# if StopIteration is raised, break from loop
				break


			So internally, the for loop creates an iterator object, iter_obj by calling iter() on the iterable.

			Ironically, this for loop is actually an infinite while loop.

			Inside the loop, it calls next() to get the next element and executes the body of the for loop with this value. After 				all the items exhaust, StopIteration is raised which is internally caught and the loop ends. Note that any other kind 				of exception will pass through.
